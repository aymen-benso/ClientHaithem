/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/iw6XgkZ1g2J
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function Sniffer() {
  const [isRunning, setIsRunning] = useState(false)
  const [packetData, setPacketData] = useState([
    {
      timestamp: "2023-06-24 12:34:56",
      sourceIP: "192.168.1.100",
      destIP: "8.8.8.8",
      packetCount: 1234,
    },
    {
      timestamp: "2023-06-24 12:34:57",
      sourceIP: "192.168.1.101",
      destIP: "8.8.4.4",
      packetCount: 567,
    },
    {
      timestamp: "2023-06-24 12:34:58",
      sourceIP: "192.168.1.102",
      destIP: "1.1.1.1",
      packetCount: 890,
    },
    {
      timestamp: "2023-06-24 12:34:59",
      sourceIP: "192.168.1.103",
      destIP: "4.4.4.4",
      packetCount: 321,
    },
    {
      timestamp: "2023-06-24 12:35:00",
      sourceIP: "192.168.1.104",
      destIP: "8.8.8.8",
      packetCount: 654,
    },
  ])
  const handleStart = () => {
    setIsRunning(true)
  }
  const handleStop = () => {
    setIsRunning(false)
  }
  return (
    <div className="flex flex-col h-full">
      <div className="flex justify-end mb-4">
        {isRunning ? (
          <Button variant="outline" onClick={handleStop}>
            Stop
          </Button>
        ) : (
          <Button onClick={handleStart}>Start</Button>
        )}
      </div>
      <div className="flex-1 overflow-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Timestamp</TableHead>
              <TableHead>Source IP</TableHead>
              <TableHead>Destination IP</TableHead>
              <TableHead>Packet Count</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {packetData.map((packet, index) => (
              <TableRow key={index}>
                <TableCell>{packet.timestamp}</TableCell>
                <TableCell>{packet.sourceIP}</TableCell>
                <TableCell>{packet.destIP}</TableCell>
                <TableCell>{packet.packetCount}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}
